import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Building2, Save, ArrowRight, User, Building, Mail, Phone, MapPin, CheckCircle, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RequiredLabel } from "@/components/ui/required-label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { EditableField, AutoGeneratedField, ReadOnlyField } from "@/components/ui/field-types";
import { Project, ProjectType, ProjectStatus, CreateProjectRequest, generateProjectNumber, JOB_TYPES, PROJECT_STATUSES } from "@/types/project";
import { Client, PAYMENT_TERMS } from "@/types/client";
import { ClientSelector } from "@/components/ClientSelector";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

interface ProjectFormProps {
  onSave: (project: Project) => void;
  onCancel: () => void;
}

export const ProjectForm = ({ onSave, onCancel }: ProjectFormProps) => {
  const { toast } = useToast();
  const navigate = useNavigate();
  const [projectName, setProjectName] = useState("");
  const [selectedClientId, setSelectedClientId] = useState<string>("");
  const [selectedClientData, setSelectedClientData] = useState<Client | null>(null);
  const [address, setAddress] = useState("");
  const [projectType, setProjectType] = useState<ProjectType>('construction_project');
  const [status, setStatus] = useState<ProjectStatus>('estimating');
  const [jobType, setJobType] = useState("");
  const [paymentTerms, setPaymentTerms] = useState("Net 30");
  const [projectNumber, setProjectNumber] = useState("");
  const [minimumMarginThreshold, setMinimumMarginThreshold] = useState(10.0);
  const [targetMargin, setTargetMargin] = useState(20.0);
  const [isLoading, setIsLoading] = useState(false);

  // Validation states
  const [clientError, setClientError] = useState("");
  const [projectNameError, setProjectNameError] = useState("");
  const [projectTypeError, setProjectTypeError] = useState("");
  const [hasValidated, setHasValidated] = useState(false);

  useEffect(() => {
    // Auto-generate project number on form load
    const initProjectNumber = async () => {
      const number = await generateProjectNumber();
      setProjectNumber(number);
    };
    initProjectNumber();
  }, []);

  const fetchClientData = async (clientId: string) => {
    try {
      const { data: client, error } = await supabase
        .from('clients')
        .select('*')
        .eq('id', clientId)
        .maybeSingle();

      if (error) throw error;
      setSelectedClientData(client as Client);
      
      // Auto-fill payment terms from client
      if (client?.payment_terms) {
        setPaymentTerms(client.payment_terms);
      }
    } catch (error) {
      console.error('Error fetching client data:', error);
    }
  };

  const handleClientChange = (clientId: string, clientName?: string) => {
    setSelectedClientId(clientId);
    if (clientId) {
      fetchClientData(clientId);
    } else {
      setSelectedClientData(null);
    }
  };

  const handleSave = async () => {
    setHasValidated(true);
    
    if (!validateAllFields()) {
      return;
    }

    setIsLoading(true);
    
    try {
      // Use RLS to automatically set company_id  
      const { data: insertedProject, error: insertError } = await supabase
        .from('projects')
        .insert({
          project_name: projectName.trim(),
          client_id: selectedClientId,
          client_name: selectedClientData?.client_name || '',
          address: address.trim() || null,
          project_type: projectType,
          job_type: jobType.trim() || null,
          payment_terms: paymentTerms,
          project_number: projectNumber,
          status: status as any,
          minimum_margin_threshold: minimumMarginThreshold,
          target_margin: targetMargin,
        })
        .select()
        .single();

      if (insertError) throw insertError;

      const newProject: Project = {
        id: insertedProject.id,
        project_name: insertedProject.project_name,
        client_name: insertedProject.client_name,
        address: insertedProject.address,
        project_type: insertedProject.project_type,
        job_type: insertedProject.job_type,
        qb_formatted_number: insertedProject.qb_formatted_number,
        project_number: insertedProject.project_number,
        status: insertedProject.status as any,
        quickbooks_job_id: insertedProject.quickbooks_job_id,
        created_at: new Date(insertedProject.created_at),
        updated_at: new Date(insertedProject.updated_at),
        start_date: insertedProject.start_date ? new Date(insertedProject.start_date) : undefined,
        end_date: insertedProject.end_date ? new Date(insertedProject.end_date) : undefined,
      };

      onSave(newProject);

      toast({
        title: "Project Created",
        description: `Project ${projectNumber} has been created successfully.`
      });

      // Navigate to next step based on project type
      if (projectType === 'construction_project') {
        // Construction projects require estimates, navigate to estimate creation
        navigate(`/estimates?project=${newProject.id}`);
      } else if (projectType === 'work_order') {
        // Work orders skip estimates and go directly to expense tracking  
        navigate(`/expenses?project=${newProject.id}`);
      }

    } catch (error) {
      console.error('Error creating project:', error);
      toast({
        title: "Error",
        description: "Failed to create project. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const regenerateProjectNumber = async () => {
    const number = await generateProjectNumber();
    setProjectNumber(number);
  };

  // Validation functions
  const validateClient = () => {
    if (!selectedClientId) {
      return "Please select a client";
    }
    return "";
  };

  const validateProjectName = () => {
    if (!projectName.trim()) {
      return "Project name is required";
    }
    if (projectName.trim().length < 3) {
      return "Project name must be at least 3 characters";
    }
    return "";
  };

  const validateProjectType = () => {
    if (!projectType) {
      return "Please select a project type";
    }
    return "";
  };

  const validateAllFields = () => {
    const clientErr = validateClient();
    const nameErr = validateProjectName();
    const typeErr = validateProjectType();
    
    setClientError(clientErr);
    setProjectNameError(nameErr);
    setProjectTypeError(typeErr);
    
    return !clientErr && !nameErr && !typeErr;
  };

  const getCompletedFieldsCount = () => {
    let count = 0;
    if (selectedClientId) count++;
    if (projectName.trim() && projectName.trim().length >= 3) count++;
    if (projectType) count++;
    return count;
  };

  const isFormValid = () => {
    return selectedClientId && projectName.trim().length >= 3 && projectType;
  };

  // Field validation handlers
  const handleClientBlur = () => {
    if (hasValidated) {
      setClientError(validateClient());
    }
  };

  const handleProjectNameBlur = () => {
    if (hasValidated) {
      setProjectNameError(validateProjectName());
    }
  };

  const handleProjectNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setProjectName(e.target.value);
    if (hasValidated) {
      setProjectNameError(validateProjectName());
    }
  };

  const handleProjectTypeChange = (value: ProjectType) => {
    setProjectType(value);
    if (hasValidated) {
      setProjectTypeError(validateProjectType());
    }
  };

  return (
    <div className="form-dense space-y-2">
      <Card>
        <CardHeader className="p-3">
          <CardTitle className="flex items-center gap-2 text-base">
            <Building2 className="h-4 w-4" />
            Create New Project
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 p-3">
          {/* Completion Progress */}
          <div className="flex items-center gap-2 p-2 bg-muted/30 rounded-lg">
            <CheckCircle className="h-5 w-5 text-green-600" />
            <div>
              <p className="font-medium text-green-700">
                {getCompletedFieldsCount()} of 3 required fields complete
              </p>
              <p className="text-sm text-muted-foreground">
                Fill in all required fields to create your project
              </p>
            </div>
          </div>

          {/* Project Number */}
          <AutoGeneratedField
            label="Project Number"
            value={projectNumber}
            onRegenerate={regenerateProjectNumber}
            tooltip="Automatically generated unique project identifier"
            regenerateLabel="Generate New"
          />

          {/* Basic Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <EditableField
              label="Project Name"
              value={projectName}
              onChange={handleProjectNameChange}
              onBlur={handleProjectNameBlur}
              placeholder="Enter project name"
              required
              error={projectNameError}
              tooltip="Descriptive name for this project"
            />
            
            <div className="space-y-2">
               <RequiredLabel>Client</RequiredLabel>
               <ClientSelector
                 value={selectedClientId}
                 onValueChange={handleClientChange}
                 onBlur={handleClientBlur}
                 placeholder="Select a client"
                 required={true}
                 error={clientError}
                 showLabel={false}
               />
              {clientError && (
                <p className="text-sm font-medium text-destructive">{clientError}</p>
              )}
            </div>
          </div>

          {/* Client Details */}
          {selectedClientData && (
            <Card className="bg-muted/30">
              <CardContent className="p-2">
                <div className="flex items-center gap-2 mb-2">
                  <User className="h-3 w-3 text-primary" />
                  <Label className="text-xs font-semibold">Selected Client Details</Label>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <User className="h-3 w-3 text-muted-foreground" />
                      <span className="font-medium">{selectedClientData.client_name}</span>
                    </div>
                    {selectedClientData.company_name && (
                      <div className="flex items-center gap-2">
                        <Building className="h-3 w-3 text-muted-foreground" />
                        <span>{selectedClientData.company_name}</span>
                      </div>
                    )}
                    {selectedClientData.contact_person && (
                      <div className="flex items-center gap-2">
                        <User className="h-3 w-3 text-muted-foreground" />
                        <span>Contact: {selectedClientData.contact_person}</span>
                      </div>
                    )}
                  </div>
                  <div className="space-y-2">
                    {selectedClientData.email && (
                      <div className="flex items-center gap-2">
                        <Mail className="h-3 w-3 text-muted-foreground" />
                        <span>{selectedClientData.email}</span>
                      </div>
                    )}
                    {selectedClientData.phone && (
                      <div className="flex items-center gap-2">
                        <Phone className="h-3 w-3 text-muted-foreground" />
                        <span>{selectedClientData.phone}</span>
                      </div>
                    )}
                    {selectedClientData.billing_address && (
                      <div className="flex items-center gap-2">
                        <MapPin className="h-3 w-3 text-muted-foreground" />
                        <span className="text-xs">{selectedClientData.billing_address}</span>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Address */}
          <div className="space-y-2">
            <Label htmlFor="address">Project Address</Label>
            <Textarea
              id="address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              placeholder="Enter project address"
              rows={3}
            />
          </div>

          {/* Project Type, Status, Job Type */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
            <div className="space-y-2">
              <RequiredLabel>Project Type</RequiredLabel>
              <Select value={projectType} onValueChange={handleProjectTypeChange}>
                <SelectTrigger className={cn(projectTypeError && "border-destructive")}>
                  <SelectValue placeholder="Select project type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="construction_project">
                    <div className="flex flex-col items-start">
                      <span>Construction Project</span>
                      <span className="text-sm text-muted-foreground">Requires estimate creation</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="work_order">
                    <div className="flex flex-col items-start">
                      <span>Work Order</span>
                      <span className="text-sm text-muted-foreground">Skip estimate, go directly to expenses</span>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Status</Label>
              <Select value={status} onValueChange={(value: ProjectStatus) => setStatus(value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  {PROJECT_STATUSES.map((statusOption) => (
                    <SelectItem key={statusOption.value} value={statusOption.value}>
                      {statusOption.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="jobType">Job Type</Label>
              <Select value={jobType} onValueChange={setJobType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select job type" />
                </SelectTrigger>
                <SelectContent>
                  {JOB_TYPES.map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Payment Terms */}
          <div className="space-y-2">
            <Label htmlFor="paymentTerms">Payment Terms</Label>
            <Select value={paymentTerms} onValueChange={setPaymentTerms}>
              <SelectTrigger>
                <SelectValue placeholder="Select payment terms" />
              </SelectTrigger>
              <SelectContent>
                {PAYMENT_TERMS.map((terms) => (
                  <SelectItem key={terms} value={terms}>
                    {terms}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {selectedClientData?.payment_terms && (
              <p className="text-xs text-muted-foreground">
                Auto-filled from client default: {selectedClientData.payment_terms}
              </p>
            )}
          </div>

          {/* Margin Thresholds */}
          <Card className="bg-muted/20">
            <CardContent className="p-2 space-y-2">
              <div>
                <Label className="text-xs font-semibold">Margin Thresholds</Label>
                <p className="text-[10px] text-muted-foreground mt-1">
                  Set profit margin targets and minimum acceptable levels for this project
                </p>
              </div>
              <div className="grid grid-cols-2 gap-2">
                <div className="space-y-2">
                  <Label htmlFor="minimumMargin">Minimum Margin (%)</Label>
                  <Input
                    id="minimumMargin"
                    type="number"
                    step="0.1"
                    min="0"
                    max="100"
                    value={minimumMarginThreshold}
                    onChange={(e) => setMinimumMarginThreshold(parseFloat(e.target.value) || 10.0)}
                    placeholder="10.0"
                  />
                  <p className="text-xs text-muted-foreground">Alert threshold for low margins</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="targetMargin">Target Margin (%)</Label>
                  <Input
                    id="targetMargin"
                    type="number"
                    step="0.1"
                    min="0"
                    max="100"
                    value={targetMargin}
                    onChange={(e) => setTargetMargin(parseFloat(e.target.value) || 20.0)}
                    placeholder="20.0"
                  />
                  <p className="text-xs text-muted-foreground">Target profit percentage</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Next Steps Info */}
          <Card className="bg-muted/50">
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <ArrowRight className="h-4 w-4 text-primary" />
                <div>
                  <p className="font-medium">Next Step:</p>
                  <p className="text-sm text-muted-foreground">
                    {projectType === 'construction_project' 
                      ? "After creating this project, you'll be taken to create an estimate."
                      : "After creating this project, you'll be taken directly to expense tracking."
                    }
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Actions */}
          <div className="flex gap-3 pt-4">
            <Button 
              onClick={handleSave} 
              className="flex-1" 
              disabled={isLoading || !isFormValid()}
            >
              {isLoading ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : <Save className="h-4 w-4 mr-2" />}
              {isLoading ? "Creating..." : "Create Project"}
            </Button>
            <Button onClick={onCancel} variant="outline" disabled={isLoading}>
              Cancel
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};